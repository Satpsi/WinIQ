import telebot
import vk_api
import time
import threading
import g4f

TELEGRAM_BOT_TOKEN = '' #https://t.me/BotFather —Ç—É—Ç –±–µ—Ä–µ—Ç–µ —Ç–æ–∫–µ–Ω –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞ —Å–≤–æ–µ–≥–æ
VK_TOKEN = '' #—Å–æ–∑–¥–∞–µ—Ç–µ —Å–≤–æ–µ –≤–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∏ –±–µ—Ä–µ—Ç access —Ç–æ–∫–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ https://vkhost.github.io/ –∏ –≤—ã–±–µ—Ä–∞–µ—Ç–µ offline,wall,photos,docs,groups,friends
#–∏–ª–∏ https://oauth.v k.com/authorize?client_id=–¢–£–¢ –í–´ –í–í–û–î–ò–¢–ï –ê–ô–î–ò –°–í–û–ï–ì–û –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø –í –í–ö&display=page&redirect_uri=https://oauth.vk.com/blank.html&scope=offline,wall,photos,docs,groups,friends&response_type=token&v=5.21
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)


def get_user_groups(user_id, token):
    vk_session = vk_api.VkApi(token=token)
    try:
        groups_info = vk_session.method('groups.get',
                                        {'user_id': user_id, 'extended': 1, 'fields': 'name,type,date,members_count'})
        if groups_info and 'items' in groups_info:
            return groups_info['items']
        else:
            return []
    except vk_api.exceptions.ApiError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return []


def get_user_data(user_id, token):
    vk_session = vk_api.VkApi(token=token)
    try:
        user_info = vk_session.method('users.get', {'user_ids': user_id,
                                                    'fields': 'first_name,last_name,is_closed,bdate,schools,id,city,universities,last_seen,counters'})
        if user_info:
            return user_info[0]
    except vk_api.exceptions.ApiError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
        return None

def user_get_and_chat_with_gpt(original_message, user_id, sent_message):
    user_data = get_user_data(user_id, VK_TOKEN)

    if not user_data:
        bot.send_message(original_message.chat.id, f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
        bot.delete_message(sent_message.chat.id, sent_message.message_id)
        return
    groups_data = get_user_groups(user_data['id'], VK_TOKEN)
    if not groups_data:
        if user_data.get('is_closed'):
            bot.send_message(original_message.chat.id, f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–∫—Ä—ã—Ç")
            bot.delete_message(sent_message.chat.id, sent_message.message_id)
            return
        bot.send_message(original_message.chat.id, "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≥—Ä—É–ø–ø –≤ VK")
        bot.delete_message(sent_message.chat.id, sent_message.message_id)
        return

    categories_list = []
    for group in groups_data:
        group_id = group['id']
        group_category = get_group_categories(group_id, VK_TOKEN)
        categories_list.append(group_category)
    num_groups = len(groups_data)
    if categories_list:
        gpt_input_text = f'—ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–¥–ø–∏—Å–æ–∫ {categories_list}, –ø–æ –Ω–µ–º—É —Ä–∞—Å—Å–æ—Ä—Ç–∏—Ä—É–π –ø–æ –≥—Ä—É–ø–ø–∞–º –∏ –≤—ã–¥–µ–ª–∏ —Ç–æ–ø 5 –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —É —á–µ–ª–æ–≤–µ–∫–∞ –µ—Å–ª–∏ —É –Ω–µ–≥–æ >= 5 –ø–æ–¥–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ —Ç–æ –≤—ã–¥–µ–ª–∏ —Å—Ç–æ–ª—å–∫–æ —Å–∫–æ–ª—å–∫–æ —É –Ω–µ–≥–æ, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫–æ–µ –ª–∏–±–æ —Ö–æ–±–±–∏, –ª—é–±–∏–º—ã–π –ø—Ä–µ–¥–º–µ—Ç, –ª—é–±–∏–º—ã–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ –≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –ù–ê–ü–ò–®–ò –ü–û–ñ–ê–õ–£–ô–°–¢–ê –ë–ï–ó –õ–ò–®–ù–ò–• –°–õ–û–í –ò –ó–ù–ê–ö–û–í, –ø—Ä–æ—Å—Ç–æ —Ç–æ–ø 5 –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –≤–æ—Ç –ø—Ä–∏–º–µ—Ä 1. –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ 2. –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ 3. –°–ø–æ—Ä—Ç 4. –ú—É–∑—ã–∫–∞ 5. –§–∏–Ω–∞–Ω—Å—ã'
        try:
            response = g4f.ChatCompletion.create(
                model=g4f.models.default,
                provider=g4f.Provider.Liaobots,
                messages=[{"role": "user", "content": gpt_input_text}],
                stream=False,
            )

            full_response = ''
            for msg in response:
                full_response += msg
        except Exception as e:
            bot.send_message(original_message.chat.id, f"Error: {e}")
    bot.delete_message(sent_message.chat.id, sent_message.message_id)
    categories_input_text = ";".join(categories_list)
    second_request_text = f'–≤–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø {categories_input_text}, –µ—Å–ª–∏ –≤ –∫–∞–∫–æ–º –ª–∏–±–æ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ª—é–±–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏–ª–∏ —Ñ–∏–∑–∏–∫–∞ –∏ —Ç–¥, –µ—Å–ª–∏ —Ç—ã –Ω–∞–π–¥–µ—à—å –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —à–∫–æ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç —Ç–æ –ù–ê–ü–ò–®–ò –°–¢–û–õ–¨–ö–û –ï–ì–û –ë–ï–ó –õ–ò–®–ù–ò–• –ó–ù–ê–ö–û–í –ò –°–¢–û–õ–¨–ö–û –°–ö–û–õ–¨–ö–û –ù–ê–®–ï–õ –Ω–∞–ø—Ä–∏–º–µ—Ä 1.—Ñ–∏–∑–∏–∫–∞ 2.–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ 3.–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞, –µ—Å–ª–∏ —Ç—ã –Ω–µ –Ω–∞—à–µ–ª –ø—Ä–µ–¥–º–µ—Ç–∞, –ù–ê–ü–ò–®–ò –ë–ï–ó –õ–ò–®–ù–ò–• –ó–ù–ê–ö–û–í –≤–æ—Ç —Ç–∞–∫ -> False'

    try:
        response2 = g4f.ChatCompletion.create(
            model=g4f.models.default,
            provider=g4f.Provider.Liaobots,
            messages=[{"role": "user", "content": second_request_text}],
            stream=False,
        )

        full_response2 = ''
        for msg in response2:
            full_response2 += msg
        if 'False' in full_response2:
            result = f'''–ü—Ä–∏–≤–µ—Ç, {get_user_data()}!
–ú—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏–ª–∏ —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è —Ç–µ–±—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
–¢–≤–æ–∏ —É–≤–ª–µ—á–µ–Ω–∏—è:

{full_response}'''
        else:
            result = f'''–ü—Ä–∏–≤–µ—Ç, {get_user_data}!
–ú—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏–ª–∏ —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è —Ç–µ–±—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
–¢–≤–æ–∏ —É–≤–ª–µ—á–µ–Ω–∏—è:

{full_response}

–ò—Å—Ö–æ–¥—è –∏–∑ —Ç–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ —É–º–µ–Ω–∏–π, –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –∫—É—Ä—Å—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è:

{full_response2}'''
            bot.send_message(original_message.chat.id, result)
        bot.send_message(original_message.chat.id, full_response, full_response2)
    except Exception as e:
        bot.send_message(original_message.chat.id, f"Error: {e}")
    bot.send_message(original_message.chat.id, "–ì–æ—Ç–æ–≤–æ")


def get_group_categories(group_id, access_token):
    vk_session = vk_api.VkApi(token=access_token)
    vk = vk_session.get_api()
    try:
        group_info = vk.groups.getById(group_id=group_id, fields='activity')
        if group_info:
            if 'activity' in group_info[0]:
                return group_info[0]['activity']
            else:
                return "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        else:
            return "–ì—Ä—É–ø–ø–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    except vk_api.VkApiError as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ VK API: {e}"


@bot.message_handler(commands=['start'])
def welcome(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = telebot.types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è‚ùì')
    item2 = telebot.types.KeyboardButton('–£–∑–Ω–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—åüîé')
    markup.add(item1, item2)

    bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≥–æ—Ç–æ–≤—ã —Å–¥–µ–ª–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π VK ID', reply_markup=markup)


@bot.message_handler(func=lambda message: True)
def handle_text(message):
    if message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è‚ùì':
        bot.send_message(message.chat.id, '–≠—Ç–æ –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞ –°–∏—Ä–∏—É—Å-–õ–µ—Ç–æ, –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –ø–∏—Å–∞—Ç—å @Satpsi\n\
–ú—ã –Ω–µ –Ω–µ—Å–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, \
–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –∏—Å—Ö–æ–¥—è –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã')
    elif message.text == '–£–∑–Ω–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—åüîé':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ VK ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n@Name (–æ—Ç–ø—Ä–∞–≤—å Name)\n–ò–ª–∏ –≤–æ—Ç —Ç–∞–∫: id123456789 / 123456789')
        bot.register_next_step_handler(message, process_vk_id_input)
    else:
        bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.')



def process_vk_id_input(message):
    user_id = message.text
    bot.send_message(message.chat.id, "–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑...")
    sent_message = bot.send_message(message.chat.id, "–ê–Ω–∞–ª–∏–∑ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")

    threading.Thread(target=user_get_and_chat_with_gpt, args=(message, user_id, sent_message)).start()



while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"Error: {e}")
        time.sleep(1)
